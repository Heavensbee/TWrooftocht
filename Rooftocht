// ==UserScript==

// @name            Scavenge
// @author          Jonas
// @version         1.7
// @description     Scavenging made easy
// @include         https://nl*.tribalwars.nl/game.php?*screen=place&mode=scavenge*
// @grant             none
// ==/UserScript==

$(document).ready(function(){
    // opgeslagen settings ophalen of indien niets gevonden wordt leeg object aanmaken
    let scavengeSettings = JSON.parse(localStorage.getItem("scavengeSettings"+game_data.world)) || {};
    // Indien geen settings gevonden/ misse versie -> default settings instellen
    if(scavengeSettings === null || scavengeSettings.version !== "1.7") {
        scavengeSettings.version = "1.7";
        scavengeSettings.unlock = true;
        scavengeSettings.duration = 3;
        scavengeSettings.sendAllTroops = false;
        scavengeSettings.off = true;
        scavengeSettings.lc = false;
        scavengeSettings.marcher = false;
        scavengeSettings.def = false;
        scavengeSettings.heavy = false;
        scavengeSettings.hotkey = 'r';
        scavengeSettings.hotkeyCode = 82;
        scavengeSettings.hotkeyEnabled = true;
        scavengeSettings.durationExponent = 0;
        scavengeSettings.durationFactor = 0;
        scavengeSettings.durationInitialSeconds = 0;
    }
    let settingsView = document.createElement('div');
    settingsView.id = 'settingsScavenge';
    settingsView.style.cssText = "background-color:#ecd6ad;border:1px solid #7d510f;z-index:99;padding:7px;width:300px;height:auto;border-radius:7px;display:none;font-size:12px;font-weight: normal";
    settingsView.innerHTML += '<div><h1 style ="text-align: left; font-size: small" >Scavenge settings</h1></div>';
    settingsView.innerHTML += '<div><input id = "unlockScavengeCheckbox" type = "checkbox"><label for="unlockScavengeCheckbox">Unlock scavenges if possible</label> </div>';
    settingsView.innerHTML += '<div><input id = "sendAllTroopsScavengeCheckbox" type = "checkbox"><label for="sendAllTroopsScavengeCheckbox">Send all selected troops</label> </div>';
    settingsView.innerHTML += '<div id = "divDurationSettings" align = "left"><label style="font-size: 13px">duration: </label><input id = "scavengeDurationText" type="text" size="5" placeholder="hours"> <label>hours</label></div>';
    settingsView.innerHTML += '<div><input id = "offScavengeCheckbox" type = "checkbox"><label for="offScavengeCheckbox">Send off scavenge</label> <img src="https://dsnl.innogamescdn.com/asset/fa6f0423/graphic/unit/unit_axe.png"> </div>';
    settingsView.innerHTML += '<div id = "divExtraOffSettings" style="display: none; margin-left: 20px"><div><input id = "offLcScavengeCheckbox" type = "checkbox"> <label for="offLcScavengeCheckbox">Use lc</label> <img src="https://dsnl.innogamescdn.com/asset/fa6f0423/graphic/unit/unit_light.png"</div><div><input id = "offMarcherScavengeCheckbox" type = "checkbox"> <label for="offMarcherScavengeCheckbox">Use marchers </label><img src="https://dsnl.innogamescdn.com/asset/fa6f0423/graphic/unit/unit_marcher.png"></div></div>';
    settingsView.innerHTML += '<div><input id = "defScavengeCheckbox" type = "checkbox"> <label for="defScavengeCheckbox">Send def scavenge</label> <img src="https://dsnl.innogamescdn.com/asset/fa6f0423/graphic/unit/unit_sword.png"> </div>';
    settingsView.innerHTML += '<div id = "divExtraDefSettings" style="display: none; margin-left: 20px"><input id = "defHeavyScavengeCheckbox" type = "checkbox"> <label for="defHeavyScavengeCheckbox">Use zc </label><img src="https://dsnl.innogamescdn.com/asset/fa6f0423/graphic/unit/unit_heavy.png"></div>';
    settingsView.innerHTML += '<div align = "left"><label style="font-size: 13px">hotkey: </label><input id = "scavengeHotkey" type="text" size="7" maxlength="1" placeholder="hotkey"></div>';
    settingsView.innerHTML += '<div  align="right"><a id="scavengeSettingsSave" href="#">Save</a></div>';
    $('h3').append('<div style="font-size: small"><a id="scavengeSettingsShow" href = "#">Scavenge settings</a></div>',settingsView);

    //cache jquery selectors
    let $scavengeHotkeyPreload = $('#scavengeHotkey');
    let $sendAllTroopsScavengeCheckboxPreload = $('#sendAllTroopsScavengeCheckbox');
    let $scavengeDurationTextPreload = $('#scavengeDurationText');
    let $offScavengeCheckboxPreload = $('#offScavengeCheckbox');
    let $defScavengeCheckboxPreload = $('#defScavengeCheckbox');

    //instellingen tonen
    $("#scavengeSettingsShow").click(function () {
        scavengeSettings.hotkeyEnabled = false;
        $('#scavengeSettingsShow').hide();
        $('#settingsScavenge').show();
        scavengeSettings.duration !== 3 ? $scavengeDurationTextPreload.val(scavengeSettings.duration) : $scavengeDurationTextPreload.val("");
        $scavengeHotkeyPreload.val(scavengeSettings.hotkey).blur();
        if(scavengeSettings.unlock){
            $('#unlockScavengeCheckbox').prop('checked',true);
        } else {
            $('#unlockScavengeCheckbox').prop('checked',false);
        }
        if(scavengeSettings.sendAllTroops){
            $sendAllTroopsScavengeCheckboxPreload.prop('checked',true);
            $('#divDurationSettings').hide();
        } else {
            $sendAllTroopsScavengeCheckboxPreload.prop('checked',false);
        }
        if(scavengeSettings.off){
            $offScavengeCheckboxPreload.prop('checked',true);
            $('#divExtraOffSettings').show();
        } else {
            $offScavengeCheckboxPreload.prop('checked',false);
        }
        if(scavengeSettings.def){
            $defScavengeCheckboxPreload.prop('checked',true);
            $('#divExtraDefSettings').show();
        } else {
            $defScavengeCheckboxPreload.prop('checked',false);
        }
        $('#offLcScavengeCheckbox').prop('checked',scavengeSettings.lc);
        $('#offMarcherScavengeCheckbox').prop('checked', scavengeSettings.marcher);
        $('#defHeavyScavengeCheckbox').prop('checked',scavengeSettings.heavy);

        //Duration opties tonen
        $sendAllTroopsScavengeCheckboxPreload.change(function () {
            if($sendAllTroopsScavengeCheckboxPreload.prop('checked') === true) {
                $('#divDurationSettings').hide();
            } else {
                $('#divDurationSettings').show();
            }
        });
        //extra off opties tonen
        $offScavengeCheckboxPreload.change(function(){
            if($offScavengeCheckboxPreload.prop('checked') === true) {
                $('#divExtraOffSettings').show();
            } else {
                $('#divExtraOffSettings').hide();
                $('#offLcScavengeCheckbox').prop('checked',false);
                $('#offMarcherScavengeCheckbox').prop('checked',false);
            }
        });
        //extra def opties tonen
        $defScavengeCheckboxPreload.change(function(){
            if($('#defScavengeCheckbox').prop('checked') === true) {
                $('#divExtraDefSettings').show();
            } else {
                $('#divExtraDefSettings').hide();
                $('#defHeavyScavengeCheckbox').prop('checked',false);
            }
        });
        //hotkey instellen
        $.on('keyup', function (e) {
            $(this).val(e.originalEvent.key);
            scavengeSettings.hotkeyCode = e.keyCode;
        });
    });
    //instellingen opslaan -> localstorage
    $("#scavengeSettingsSave").click(function(){
        $('#settingsScavenge').hide();
        $('#scavengeSettingsShow').show();
        scavengeSettings.unlock = $('#unlockScavengeCheckbox').prop('checked');
        scavengeSettings.sendAllTroops = $sendAllTroopsScavengeCheckboxPreload.prop('checked');
        scavengeSettings.duration = $scavengeDurationTextPreload.val();
        scavengeSettings.off = $offScavengeCheckboxPreload.prop('checked');
        scavengeSettings.lc = $('#offLcScavengeCheckbox').prop('checked');
        scavengeSettings.marcher = $('#offMarcherScavengeCheckbox').prop('checked');
        scavengeSettings.def = $defScavengeCheckboxPreload.prop('checked');
        scavengeSettings.heavy = $('#defHeavyScavengeCheckbox').prop('checked');
        scavengeSettings.hotkey = $('#scavengeHotkey').val();
        scavengeSettings.hotkeyEnabled = true;
        //Code van Warre om de nodige instellingen automatisch op te halen
        if (scavengeSettings.durationExponent === 0){
            let scavengeObject = JSON.parse($('html').find('script:contains("ScavengeScreen")').html().match(/{.*:{.*:.*}}/g)[0])[1];
            scavengeSettings.durationExponent = scavengeObject.duration_exponent;
            scavengeSettings.durationFactor = scavengeObject.duration_factor;
            scavengeSettings.durationInitialSeconds = scavengeObject.duration_initial_seconds;
        }
        localStorage.setItem("scavengeSettings"+game_data.world, JSON.stringify(scavengeSettings));
        location.reload();
    });

    //Indien hotkey ingeduwd wordt rooftocht uitvoeren
    $(document).keydown(function(keyPressed){
        if(keyPressed.keyCode === scavengeSettings.hotkeyCode && scavengeSettings.hotkeyEnabled) {
            $content = $('#scavenge_screen');
            let $scavengeButtons = $content.find('.btn-default.free_send_button').not('.btn-disabled');
            let $unlockButtons = $content.find('.unlock-button').not('.btn-disabled');
            let $countdownbuttons = $content.find('.unlock-countdown');
            let $confirmPopup = $('.scavenge-option-unlock-dialog');
            let $warnConfirmPopup = $confirmPopup.find('.warn');
            let units = {'spear': {'haul': 25, 'enabled': scavengeSettings.def, 'amount': 0, 'population': 1}, 'sword': {'haul': 15, 'enabled': scavengeSettings.def, 'amount': 0, 'population': 1}, 'axe':{'haul': 10, 'enabled': scavengeSettings.off, 'amount': 0, 'population': 1}, 'archer': {'haul': 10, 'enabled': scavengeSettings.def, 'amount': 0, 'population': 1}, 'light':{'haul': 80, 'enabled': scavengeSettings.lc, 'amount': 0, 'population': 4}, 'marcher':{'haul': 50, 'enabled': scavengeSettings.marcher, 'amount': 0, 'population': 5}, 'heavy':{'haul': 50, 'enabled': scavengeSettings.heavy, 'amount': 0, 'population': 6}};
            let possibleHaul = 0;
            let totalPop = 0;
            for (let unit in units) {
                if (units[unit].enabled){
                    let amount = parseInt($content.find('.units-entry-all[data-unit="' + unit + '"]').text().match(/\d+/));
                    if(isNaN(amount)) amount = 0;
                    totalPop += amount*units[unit].population;
                    possibleHaul += amount*units[unit].haul;
                    units[unit].amount = amount;
                }
            }
            if(!scavengeSettings.off && !scavengeSettings.def){
                //niets doen
                void(0);
            } else if($scavengeButtons.length > 0 && possibleHaul > 0 && totalPop > 10){
                let sameTimeFactor = [{'Flegmatische  Fielt': 15/26, 'Bescheiden Bandieten': 3/13, 'Slimme Speurders': 3/26, 'Reuze Rovers': 1/13}, {'Flegmatische  Fielt': 5/8, 'Bescheiden Bandieten': 1/4, 'Slimme Speurders': 1/8}, {'Flegmatische  Fielt': 5/7, 'Bescheiden Bandieten': 2/7}];
                let lootFactors = {'Flegmatische  Fielt': 0.1, 'Bescheiden Bandieten': 0.25, 'Slimme Speurders': 0.5, 'Reuze Rovers': 0.75};
                let scavengeTitle = $scavengeButtons.last().closest('.scavenge-option').find('.title').text().trim();
                let unitsToSend = {'spear': 0, 'sword': 0, 'axe': 0, 'archer': 0, 'light': 0, 'marcher': 0, 'heavy': 0};
                if(scavengeSettings.sendAllTroops){
                    let totalSendPop = 0;
                    for (let sendUnit in units){
                            if (scavengeTitle === "Flegmatische  Fielt"){
                                unitsToSend[sendUnit] = units[sendUnit].amount;
                            } else {
                                unitsToSend[sendUnit] = Math.round(units[sendUnit].amount * sameTimeFactor[4-$scavengeButtons.length][scavengeTitle]);
                                totalSendPop += Math.round(units[sendUnit].amount * sameTimeFactor[4-$scavengeButtons.length][scavengeTitle])*units[sendUnit].population;
                            }
                    }
                    if(totalSendPop < 10){
                        for (let extraUnit in units){
                            if(units[extraUnit].amount > unitsToSend[extraUnit]){
                                let leftoverUnits = (units[extraUnit].amount - unitsToSend[extraUnit]);
                                let leftoverPop = leftoverUnits*units[extraUnit].population;
                                if(leftoverPop > 10 - totalSendPop){
                                    let temp = (10 - totalSendPop) / units[extraUnit].population;
                                    unitsToSend[extraUnit] += temp > Math.floor(temp) ? temp + 1 : temp;
                                    break;
                                } else {
                                    unitsToSend[extraUnit] += leftoverUnits;
                                    totalSendPop += leftoverPop;
                                }
                            }
                        }
                    }
                } else {
                    //Berekenen hoeveel eenheden verstuurd moeten worden
                    let totalLoot = Math.pow(Math.pow((scavengeSettings.duration*3600/scavengeSettings.durationFactor)-scavengeSettings.durationInitialSeconds, 1/scavengeSettings.durationExponent)/100,1/2);
                    let scavengeLoot = Math.round(totalLoot/lootFactors[scavengeTitle]);
                    let currentLoot = 0;
                    for(let sendUnit in units){
                        currentLoot += units[sendUnit].amount*units[sendUnit].haul;
                        if (currentLoot > scavengeLoot){
                            unitsToSend[sendUnit] = Math.round((scavengeLoot-currentLoot+units[sendUnit].amount*units[sendUnit].haul)/units[sendUnit].haul);
                            break;
                        } else {
                            unitsToSend[sendUnit] = units[sendUnit].amount;
                        }
                    }
                }

                //eenheden invullen
                for(let unit in unitsToSend){
                    if (unitsToSend[unit] !== 0){
                        let $unitInputText = $('.unitsInput[name="' + unit + '"]');
                        $unitInputText.val(unitsToSend[unit]).trigger('change');
                    }
                }
                //rooftocht verzenden
                $scavengeButtons.last().click();
            } else if(scavengeSettings.unlock && $unlockButtons.length > 0 && $countdownbuttons.length === 0 && $warnConfirmPopup.length === 0){
                if($confirmPopup.length > 0) {
                    $confirmPopup.find('a.btn.btn-default').click();
                } else {
                    $unlockButtons.first().click();
                }
            } else {
                //change village
                $('.arrowRight, .groupRight').click();
            }
        }
    });
});
